package Views;

import java.text.DecimalFormat;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author THOMAS
 */
public class Eliminación_Gausseana extends javax.swing.JFrame {

    /**
     * Creates new form Eliminación_Gausseana
     */
    
    /**
     * @param args the command line arguments
     */
    
    DefaultTableModel model;
    DefaultTableModel iteracion;
    DefaultTableModel resultado;
    int rango;
    double A[][];
    double B[];
        
    private static DecimalFormat df = new DecimalFormat("0.0000");
     private static DecimalFormat gf = new DecimalFormat("0.0");
    
    public Eliminación_Gausseana() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.pack();
        
        ((DefaultTableCellRenderer) Tabla_Matriz.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        ((DefaultTableCellRenderer) Tabla_Resultado.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(JLabel.CENTER);
        
        //Ajuste de tamaño de celdas
        Tabla_Matriz.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        Tabla_Matriz.doLayout();
        Tabla_Matriz.setRowMargin(10);
        Tabla_Matriz.setRowHeight(50);
        Tabla_Iteraciones.setRowMargin(0);
        Tabla_Iteraciones.setRowHeight(50);
        Tabla_Resultado.setRowMargin(10);
        Tabla_Resultado.setRowHeight(50);
        
        //Inivializacion de los modelos de tabla
        model = new DefaultTableModel(new Object[] {"X1"} , 0);
        iteracion = new DefaultTableModel(new Object[] {""} , 0);
        resultado = new DefaultTableModel(new Object[] {"B"} , 0);
        
        //Asignacion de modelos de tablas a las tablas
        Tabla_Matriz.setModel(model);
        Tabla_Iteraciones.setModel(iteracion);
        Tabla_Resultado.setModel(resultado);
        
    }
   
    //Inicialización de las matrices
    public void startTable() {
        model.setColumnCount(0);
        iteracion.setColumnCount(0);
        resultado.setRowCount(0);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BtnPreparar = new javax.swing.JButton();
        txtOrden = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Ejecutar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla_Iteraciones = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tabla_Matriz = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        Tabla_Resultado = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        BtnPreparar.setText("Preparar");
        BtnPreparar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPrepararActionPerformed(evt);
            }
        });

        txtOrden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtOrdenKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Orden de la matriz");

        Ejecutar.setText("Ejecutar");
        Ejecutar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                EjecutarFocusGained(evt);
            }
        });
        Ejecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutarActionPerformed(evt);
            }
        });

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(BtnPreparar)
                .addGap(18, 18, 18)
                .addComponent(Ejecutar)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnPreparar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Tabla_Iteraciones.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Tabla_Iteraciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", ""
            }
        ));
        Tabla_Iteraciones.setEnabled(false);
        Tabla_Iteraciones.setRowHeight(30);
        Tabla_Iteraciones.setShowHorizontalLines(false);
        Tabla_Iteraciones.setShowVerticalLines(false);
        jScrollPane1.setViewportView(Tabla_Iteraciones);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Tabla_Matriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Tabla_Matriz.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Tabla_Matriz.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla_Matriz.setRowHeight(30);
        Tabla_Matriz.setSurrendersFocusOnKeystroke(true);
        Tabla_Matriz.getTableHeader().setResizingAllowed(false);
        Tabla_Matriz.getTableHeader().setReorderingAllowed(false);
        Tabla_Matriz.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tabla_MatrizFocusGained(evt);
            }
        });
        Tabla_Matriz.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Tabla_MatrizKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(Tabla_Matriz);

        Tabla_Resultado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        Tabla_Resultado.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Tabla_Resultado.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tabla_Resultado.setRowHeight(30);
        Tabla_Resultado.setSurrendersFocusOnKeystroke(true);
        Tabla_Resultado.getTableHeader().setResizingAllowed(false);
        Tabla_Resultado.getTableHeader().setReorderingAllowed(false);
        Tabla_Resultado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Tabla_ResultadoFocusGained(evt);
            }
        });
        Tabla_Resultado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Tabla_ResultadoKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(Tabla_Resultado);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel2.setText("=");
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnPrepararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPrepararActionPerformed
        // TODO add your handling code here:
        startTable();
        rango = Integer.parseInt(txtOrden.getText());
        
        PrepararMatrices();
    }//GEN-LAST:event_BtnPrepararActionPerformed

    private void EjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutarActionPerformed
        // TODO add your handling code here:
        A= new double[rango][rango];
        B = new double[rango];
        
     
        
        if ((Matrizdatosllena() && Matrizresllena())) {
            for (int i = 0; i < rango; i++) {
            for (int j = 0; j < rango; j++) {
                A[i][j] = Double.parseDouble(Tabla_Matriz.getValueAt(i, j).toString());
            }
            B[i] = Double.parseDouble(Tabla_Resultado.getValueAt(i, 0).toString());
        }
        
        iteracion.setRowCount((rango*(rango+2)));
        
        eliminacionGauss(A, B);
        }   
    }//GEN-LAST:event_EjecutarActionPerformed

    private void txtOrdenKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrdenKeyTyped
        // TODO add your handling code here:
        char val = evt.getKeyChar();
        
        if (val<'0' || val>'9') evt.consume();
   
    }//GEN-LAST:event_txtOrdenKeyTyped

    private void Tabla_MatrizKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Tabla_MatrizKeyPressed
        // TODO add your handling code here:
        char val = evt.getKeyChar();
               
        if ((val<'0' || val>'9') && val>'-' ) evt.consume();
    }//GEN-LAST:event_Tabla_MatrizKeyPressed

    private void Tabla_MatrizFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tabla_MatrizFocusGained
        // TODO add your handling code here:
        if (Tabla_Resultado.isEditing()) {
            Tabla_Resultado.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_Tabla_MatrizFocusGained

    private void Tabla_ResultadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Tabla_ResultadoFocusGained
        // TODO add your handling code here:
        if (Tabla_Matriz.isEditing()) {
            Tabla_Matriz.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_Tabla_ResultadoFocusGained

    private void EjecutarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_EjecutarFocusGained
        // TODO add your handling code here:
        if (Tabla_Matriz.isEditing()) {
            Tabla_Matriz.getCellEditor().stopCellEditing();
        }else if (Tabla_Resultado.isEditing()) {
            Tabla_Resultado.getCellEditor().stopCellEditing();
        }
    }//GEN-LAST:event_EjecutarFocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Main m = new Main();
        m.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Tabla_ResultadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Tabla_ResultadoKeyPressed
        // TODO add your handling code here:
        char val = evt.getKeyChar();
               
        if ((val<'0' || val>'9') && val>'-' ) evt.consume();
    }//GEN-LAST:event_Tabla_ResultadoKeyPressed

    /**
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Eliminación_Gausseana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Eliminación_Gausseana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Eliminación_Gausseana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Eliminación_Gausseana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Eliminación_Gausseana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnPreparar;
    private javax.swing.JButton Ejecutar;
    private javax.swing.JTable Tabla_Iteraciones;
    private javax.swing.JTable Tabla_Matriz;
    private javax.swing.JTable Tabla_Resultado;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txtOrden;
    // End of variables declaration//GEN-END:variables

    //Trasformacion de la matriz aumentada
    public static double[][] aumentada(double[][] A, double[] b){
	int n = A.length;
        int m = b.length;
        double[][] Ab = new double[n][n+1];
        if(n!=m){
        	System.out.println("no es posible hacer la matriz aumentada A|b debido que"
              		+ "las filas de A es diferente al numero de elementos de b");
        }else{
        	for(int i=0;i<n;i++){
                	for(int j=0;j<n+1;j++){
                    		if(j==n){
                        		Ab[i][j] = b[i];
                    		}else{
                    			Ab[i][j] = A[i][j];
                    		}
                	}
            	}
        }
        return Ab;
}

    
//Metodo de Gauss aplicado    
public void eliminacionGauss(double[][] A, double[] b){
	int n = A.length;
        double[][] Ab = aumentada(A,b);
        double m = 0;
        //Matriz aumentada
        
        iteracion.setValueAt("Iteracion ", 0, 0);
        iteracion.setValueAt(1, 0, 1);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n+1; j++) {
                iteracion.setValueAt(gf.format(Ab[i][j]), (i+1), j);
            }
        }
        
        //Iteraciones de la Matriz
        for(int k=0;k<n-1;k++){
            iteracion.setValueAt("Iteracion ", ((n+2)*(k+1)), 0);
            iteracion.setValueAt((k+2), ((n+2)*(k+1)), 1);
            for(int i=k+1;i<n;i++){
                m = Ab[i][k] / Ab[k][k];
                for(int j=k;j<n+1;j++){
                    Ab[i][j] = (double) Ab[i][j] - m*Ab[k][j];                                    
                }
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n+1; j++) {
                    iteracion.setValueAt(gf.format(Ab[i][j]), (((n+2)*(k+1))+i+1), j);
                }
            }
        }
                
        //Valores de las X
        double suma;
        double[] x = new double[n];
        for(int i=n-1;i>=0;i--){
            suma=0;
            for(int j=i+1;j<n;j++){
                suma = suma + Ab[i][j]*x[j];
            }
            x[i] = (Ab[i][n] - suma)/Ab[i][i];
        }
        for (int i = 0; i < x.length; i++) {
            iteracion.setValueAt("X"+(i+1)+" = "+df.format(x[i]), (((n+2)*(n))-1), i);
        }
    }

//Validacion de que no halla elementos null en la matriz principal
public boolean Matrizdatosllena(){
    
    for (int i = 0; i < rango; i++) {
        for (int j = 0; j < rango; j++) {
            if (Tabla_Matriz.getValueAt(i, j) ==  null) {
                JOptionPane.showMessageDialog(rootPane, "No puede haber valores vacios en la matriz de valores", "Elementos faltantes", JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
    }
    return true;
}

//Validacion de que no halla elementos null en la matriz de resultados
public boolean Matrizresllena(){
    
    for (int i = 0; i < rango; i++) {
        if (Tabla_Resultado.getValueAt(i, 0) ==  null) {
            JOptionPane.showMessageDialog(rootPane, "No puede haber valores vacios en la matriz de resultados", "Elementos faltantes", JOptionPane.WARNING_MESSAGE);
            return false;
        }
    }
    return true;
}

//Darle el tamaño a las matrices
private void PrepararMatrices(){
     if (rango > 7) {
            JOptionPane.showMessageDialog(rootPane, "No se puede generar una matriz de orden superior al 7");
        }else{
            for (int i = 0; i < rango; i++) {
                model.addColumn("X"+(i+1));
            }
            for (int i = 0; i < (rango+1); i++) {
                iteracion.addColumn("");
            }
            model.setNumRows(rango);
            resultado.setNumRows(rango);   
        }
}

}


